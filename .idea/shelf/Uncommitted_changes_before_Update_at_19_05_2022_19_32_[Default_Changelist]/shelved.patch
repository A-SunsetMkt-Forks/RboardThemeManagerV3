Index: app/src/main/java/de/dertyp7214/rboardthememanager/utils/AppStartUp.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.dertyp7214.rboardthememanager.utils\r\n\r\nimport android.animation.ObjectAnimator\r\nimport android.app.NotificationChannel\r\nimport android.app.NotificationManager\r\nimport android.appwidget.AppWidgetManager\r\nimport android.content.ComponentName\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.view.View\r\nimport android.view.ViewTreeObserver\r\nimport android.view.animation.AnticipateInterpolator\r\nimport android.widget.Toast\r\nimport androidx.activity.result.ActivityResultLauncher\r\nimport androidx.activity.result.contract.ActivityResultContracts\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.animation.doOnEnd\r\nimport androidx.core.content.FileProvider\r\nimport androidx.core.content.edit\r\nimport androidx.preference.PreferenceManager\r\nimport com.google.firebase.messaging.FirebaseMessaging\r\nimport com.google.gson.Gson\r\nimport com.topjohnwu.superuser.BusyBoxInstaller\r\nimport com.topjohnwu.superuser.Shell\r\nimport com.topjohnwu.superuser.io.SuFile\r\nimport de.dertyp7214.rboardthememanager.BuildConfig\r\nimport de.dertyp7214.rboardthememanager.Config\r\nimport de.dertyp7214.rboardthememanager.R\r\nimport de.dertyp7214.rboardthememanager.core.*\r\nimport de.dertyp7214.rboardthememanager.data.OutputMetadata\r\nimport de.dertyp7214.rboardthememanager.preferences.Flags\r\nimport de.dertyp7214.rboardthememanager.screens.InstallPackActivity\r\nimport de.dertyp7214.rboardthememanager.screens.ShareFlags\r\nimport de.dertyp7214.rboardthememanager.widgets.FlagsWidget\r\nimport de.dertyp7214.rboardthememanager.widgets.SwitchKeyboardWidget\r\nimport org.json.JSONArray\r\nimport org.json.JSONObject\r\nimport java.io.File\r\nimport java.net.URL\r\n\r\nclass AppStartUp(private val activity: AppCompatActivity) {\r\n    private val checkUpdateUrl by lazy {\r\n        \"https://github.com/DerTyp7214/RboardThemeManagerV3/releases/download/latest-${BuildConfig.BUILD_TYPE}/output-metadata.json\"\r\n    }\r\n    private val gboardPlayStoreUrl by lazy {\r\n        \"https://play.google.com/store/apps/details?id=${Config.GBOARD_PACKAGE_NAME}\"\r\n    }\r\n    private val flagsUrl by lazy {\r\n        \"https://raw.githubusercontent.com/GboardThemes/PackRepoBeta/main/flags.json\"\r\n    }\r\n\r\n    private var checkedForUpdate = false\r\n    private var rootAccess = false\r\n    private var gboardInstalled = false\r\n    private var isReady = false\r\n\r\n    private val preferences by lazy { PreferenceManager.getDefaultSharedPreferences(activity) }\r\n\r\n    private fun AppCompatActivity.openImportFlags(\r\n        resultLauncher: ActivityResultLauncher<Intent>,\r\n        block: () -> Map<String, Any>\r\n    ) {\r\n        isReady = true\r\n        val dialog = openLoadingDialog(R.string.processing_flags)\r\n        doAsync(block) {\r\n            dialog.dismiss()\r\n            ShareFlags::class.java.start(this, resultLauncher) {\r\n                putExtra(\"import\", true)\r\n                putExtra(\"flags\", it)\r\n            }\r\n        }\r\n    }\r\n\r\n    fun setUp() {\r\n        activity.splashScreen.setOnExitAnimationListener { splashScreenView ->\r\n            val slideUp = ObjectAnimator.ofFloat(\r\n                splashScreenView,\r\n                View.TRANSLATION_Y,\r\n                0f,\r\n                -splashScreenView.height.toFloat()\r\n            )\r\n            slideUp.interpolator = AnticipateInterpolator()\r\n            slideUp.duration = 200L\r\n\r\n            slideUp.doOnEnd { splashScreenView.remove() }\r\n\r\n            slideUp.start()\r\n        }\r\n    }\r\n\r\n    fun onCreate(onCreate: AppCompatActivity.(Intent) -> Unit) {\r\n        val block: AppCompatActivity.(Intent) -> Unit = {\r\n            isReady = true\r\n            onCreate(this, it)\r\n        }\r\n        activity.apply {\r\n            content.viewTreeObserver.addOnPreDrawListener(object :\r\n                ViewTreeObserver.OnPreDrawListener {\r\n                override fun onPreDraw(): Boolean {\r\n                    return if (isReady) {\r\n                        content.viewTreeObserver.removeOnPreDrawListener(this)\r\n                        true\r\n                    } else false\r\n                }\r\n            })\r\n\r\n            Shell.enableVerboseLogging = PreferenceManager.getDefaultSharedPreferences(this)\r\n                .getString(\"logMode\", \"VERBOSE\") == \"VERBOSE\"\r\n            Shell.setDefaultBuilder(Shell.Builder.create().apply {\r\n                setFlags(Shell.FLAG_MOUNT_MASTER)\r\n                setInitializers(BusyBoxInstaller::class.java)\r\n            })\r\n\r\n            rootAccess = hasRoot()\r\n\r\n            Config.REPOS.apply {\r\n                val tmp = this.toSet()\r\n                clear()\r\n                addAll(\r\n                    preferences.getStringSet(\"repos\", tmp) ?: tmp\r\n                )\r\n            }\r\n\r\n            if (rootAccess) doInBackground {\r\n                \"rm -rf \\\"${cacheDir.absolutePath}/*\\\"\".runAsCommand()\r\n                val files = ArrayList<File>()\r\n                files.forEach {\r\n                    SuFile(it.absolutePath).deleteRecursive()\r\n                }\r\n            }\r\n\r\n            doAsync({\r\n                GboardUtils.getGboardVersionCode(this) >= 60780714\r\n            }, Config::newGboard::set)\r\n\r\n            doInBackground {\r\n                AppWidgetManager.getInstance(this).let { appWidgetManager ->\r\n                    appWidgetManager.getAppWidgetIds(\r\n                        ComponentName(this, FlagsWidget::class.java)\r\n                    ).forEach { id ->\r\n                        FlagsWidget.updateAppWidget(this, appWidgetManager, id)\r\n                    }\r\n                    appWidgetManager.getAppWidgetIds(\r\n                        ComponentName(this, SwitchKeyboardWidget::class.java)\r\n                    ).forEach { id ->\r\n                        SwitchKeyboardWidget.updateAppWidget(this, appWidgetManager, id)\r\n                    }\r\n                }\r\n            }\r\n\r\n            File(applicationInfo.dataDir, \"flags.json\").apply {\r\n                val timeStamp = try {\r\n                    let {\r\n                        if (!it.exists()) -1\r\n                        else JSONObject().safeParse(it.readText()).getLong(\"time\", -1)\r\n                    }\r\n                } catch (e: Exception) {\r\n                    delete()\r\n                    -1\r\n                }\r\n                doAsync(URL(flagsUrl)::getTextFromUrl) {\r\n                    val flagFiles = listOf(\r\n                        JSONObject().safeParse(resources.openRawResource(\r\n                            FileUtils.getResourceId(\r\n                                activity,\r\n                                \"flags\",\r\n                                \"raw\",\r\n                                packageName\r\n                            )\r\n                        ).bufferedReader().use { reader -> reader.readText() }),\r\n                        JSONObject().safeParse(it)\r\n                    )\r\n                    val latestJson =\r\n                        flagFiles.reduce { acc, safeJSON ->\r\n                            if (acc.getLong(\"time\") > safeJSON.getLong(\r\n                                    \"time\"\r\n                                )\r\n                            ) acc else safeJSON\r\n                        }\r\n                    val time = latestJson.getLong(\"time\")\r\n                    if (!exists() || time > timeStamp)\r\n                        writeText(latestJson.toString())\r\n                }\r\n            }\r\n\r\n            val initialized = preferences.getBoolean(\"initialized\", false)\r\n\r\n            val scheme = intent.scheme\r\n            val data = intent.data\r\n\r\n            Config.useMagisk = preferences.getBoolean(\"useMagisk\", false)\r\n\r\n            if (rootAccess) {\r\n                \"getprop ro.com.google.ime.d_theme_file\".runAsCommand {\r\n                    if (it.first().isNotEmpty()) Config.darkTheme = it.first()\r\n                }\r\n                \"getprop ro.com.google.ime.theme_file\".runAsCommand {\r\n                    if (it.first().isNotEmpty()) Config.lightTheme = it.first()\r\n                }\r\n\r\n                val importFlagsResultLauncher =\r\n                    registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->\r\n                        val resultData = result.data\r\n                        if (result.resultCode == AppCompatActivity.RESULT_OK && resultData != null) {\r\n                            val size = resultData.getIntExtra(\"size\", 0)\r\n                            Toast.makeText(\r\n                                this,\r\n                                getString(R.string.flags_loaded, size),\r\n                                Toast.LENGTH_SHORT\r\n                            ).show()\r\n                        }\r\n                    }\r\n\r\n                GboardUtils.loadBackupFlags { flags ->\r\n                    isReady = true\r\n                    openDialog(R.string.load_flags_long, R.string.load_flags) {\r\n                        val oldFlags = flags.readXML()\r\n                        val newFlags = HashMap<String, Any>()\r\n                        SuFile(Flags.FILES.FLAGS.filePath).readXML().forEach { (key, value) ->\r\n                            if (!oldFlags.containsKey(key)) newFlags[key] = value\r\n                        }\r\n                        SuFile(Flags.FILES.FLAGS.filePath).writeFile(flags.trim())\r\n                        GboardUtils.updateCurrentFlags(flags)\r\n                        openImportFlags(importFlagsResultLauncher) {\r\n                            newFlags\r\n                        }\r\n                        \"am force-stop ${Config.GBOARD_PACKAGE_NAME}\".runAsCommand()\r\n                    }\r\n                }\r\n            }\r\n\r\n            when {\r\n                initialized && scheme != \"content\" && data != null -> {\r\n                    if (data.scheme == \"file\") {\r\n                        val file = SuFile(data.path).let {\r\n                            File(filesDir, \"theme.pack\").apply {\r\n                                ProcessBuilder().su(\r\n                                    \"rm \\\"$absolutePath\\\"\",\r\n                                    \"cp \\\"${it.absolutePath}\\\" \\\"$absolutePath\\\"\",\r\n                                    \"chmod 644 \\\"$absolutePath\\\"\"\r\n                                ).logs(\"File Import\", false)\r\n                            }\r\n                        }\r\n                        val uri = FileProvider.getUriForFile(this, packageName, file)\r\n                        Intent(Intent.ACTION_VIEW).apply {\r\n                            setDataAndType(uri, \"application/pack\")\r\n                            flags = Intent.FLAG_GRANT_READ_URI_PERMISSION\r\n                            startActivity(this)\r\n                            finish()\r\n                        }\r\n                    } else when (data.host?.split(\".\")?.first()) {\r\n                        \"repos\" -> {\r\n                            data.queryParameterNames.forEach {\r\n                                when (it) {\r\n                                    \"add\" -> {\r\n                                        preferences.apply {\r\n                                            val repos = HashMap(\r\n                                                ArrayList(\r\n                                                    getStringSet(\"repos\", setOf())?.toList()\r\n                                                        ?: listOf()\r\n                                                ).toMap()\r\n                                            )\r\n                                            repos[data.getQueryParameter(\"add\")] = true\r\n                                            edit { putStringSet(\"repos\", repos.toSet()) }\r\n                                        }\r\n                                        Toast.makeText(\r\n                                            this,\r\n                                            R.string.repo_added,\r\n                                            Toast.LENGTH_SHORT\r\n                                        ).show()\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    finishAndRemoveTask()\r\n                }\r\n                initialized && data?.toString()?.endsWith(\".rboard\") == true -> {\r\n                    val resultLauncher =\r\n                        registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->\r\n                            val resultData = result.data\r\n                            if (result.resultCode == AppCompatActivity.RESULT_OK && resultData != null) {\r\n                                val size = resultData.getIntExtra(\"size\", 0)\r\n                                Toast.makeText(\r\n                                    this,\r\n                                    getString(R.string.flags_loaded, size),\r\n                                    Toast.LENGTH_SHORT\r\n                                ).show()\r\n                            }\r\n                            finishAndRemoveTask()\r\n                        }\r\n\r\n                    val file = File(cacheDir, \"flags.rboard\").apply {\r\n                        delete()\r\n                        data.writeToFile(activity, this)\r\n                    }\r\n                    if (file.readText().startsWith(\"link=\")) {\r\n                        val links = HashMap<Navigations.LINKS, JSONObject>()\r\n                        JSONArray().safeParse(file.readText().removePrefix(\"link=\"))\r\n                            .forEach<JSONObject> { json, _ ->\r\n                                val obj = SafeJSON(json)\r\n                                try {\r\n                                    links[Navigations.LINKS.valueOf(\r\n                                        obj.getString(\"screen\").uppercase()\r\n                                    )] = obj.getJSONObject(\"args\")\r\n                                } catch (e: Exception) {\r\n                                    Toast.makeText(\r\n                                        this,\r\n                                        R.string.invalid_link,\r\n                                        Toast.LENGTH_SHORT\r\n                                    ).show()\r\n                                }\r\n                            }\r\n                        Navigations(activity).deepLinkWithArgs(links)\r\n                    } else openImportFlags(resultLauncher) {\r\n                        file.readXML()\r\n                    }\r\n                }\r\n                initialized && data != null -> {\r\n                    val resultLauncher =\r\n                        registerForActivityResult(ActivityResultContracts.StartActivityForResult()) {\r\n                            finishAndRemoveTask()\r\n                        }\r\n                    isReady = true\r\n                    openLoadingDialog(R.string.unpacking_themes)\r\n                    doAsync({\r\n                        val zip = File(cacheDir, \"themes.pack\").apply {\r\n                            delete()\r\n                            data.writeToFile(activity, this)\r\n                        }\r\n                        if (!zip.exists()) listOf()\r\n                        else {\r\n                            val destination = File(cacheDir, zip.nameWithoutExtension)\r\n                            SuFile(destination.absolutePath).deleteRecursive()\r\n                            if (ZipHelper().unpackZip(destination.absolutePath, zip.absolutePath)) {\r\n                                destination.listFiles { file -> file.extension == \"zip\" }\r\n                                    ?.map { it.absolutePath }\r\n                                    ?: listOf()\r\n                            } else listOf()\r\n                        }\r\n                    }) {\r\n                        InstallPackActivity::class.java.start(this, resultLauncher) {\r\n                            putStringArrayListExtra(\"themes\", ArrayList(it))\r\n                        }\r\n                    }\r\n                }\r\n                else -> {\r\n                    gboardInstalled =\r\n                        PackageUtils.isPackageInstalled(Config.GBOARD_PACKAGE_NAME, packageManager)\r\n\r\n                    if (!verifyInstallerId()) createNotificationChannels(this)\r\n                    FirebaseMessaging.getInstance()\r\n                        .subscribeToTopic(\"update-v3-${BuildConfig.BUILD_TYPE.lowercase()}\")\r\n\r\n                    isReady = !gboardInstalled || !rootAccess\r\n                    when {\r\n                        !gboardInstalled -> openDialog(\r\n                            R.string.install_gboard,\r\n                            R.string.gboard_not_installed\r\n                        ) {\r\n                            openUrl(gboardPlayStoreUrl)\r\n                        }\r\n                        !rootAccess -> openDialog(\r\n                            R.string.cant_use_app,\r\n                            R.string.not_rooted,\r\n                            false,\r\n                            null\r\n                        ) {\r\n                            finishAndRemoveTask()\r\n                        }\r\n                        else -> checkForUpdate { update ->\r\n                            checkedForUpdate = true\r\n                            isReady = true\r\n                            validApp(this) {\r\n                                preferences.edit { putBoolean(\"initialized\", true) }\r\n\r\n                                if (it) block(this, Intent().putExtra(\"update\", update))\r\n                                else finish()\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun checkForUpdate(callback: (update: Boolean) -> Unit) {\r\n        if (preferences.getLong(\r\n                \"lastCheck\",\r\n                0\r\n            ) + 5 * 60 * 100 > System.currentTimeMillis()\r\n            || activity.verifyInstallerId()\r\n        ) callback(false)\r\n        else doAsync(URL(checkUpdateUrl)::getTextFromUrl) { text ->\r\n            try {\r\n                val outputMetadata = Gson().fromJson(text, OutputMetadata::class.java)\r\n                val versionCode = outputMetadata.elements.first().versionCode\r\n                preferences.edit { putLong(\"lastCheck\", System.currentTimeMillis()) }\r\n                callback(versionCode > BuildConfig.VERSION_CODE)\r\n            } catch (e: Exception) {\r\n                callback(false)\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun validApp(activity: AppCompatActivity, callback: (valid: Boolean) -> Unit) {\r\n        preferences.apply {\r\n            var valid = getBoolean(\"verified\", true)\r\n            if (valid) callback(valid)\r\n            else activity.openDialog(R.string.unreleased, R.string.notice, false, {\r\n                it.dismiss()\r\n                callback(valid)\r\n            }) {\r\n                it.dismiss()\r\n                valid = true\r\n                callback(valid)\r\n                edit { putBoolean(\"verified\", true) }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun createNotificationChannels(activity: AppCompatActivity) {\r\n        activity.apply {\r\n            val namePush = getString(R.string.channel_name)\r\n            val channelIdPush = getString(R.string.default_notification_channel_id)\r\n            val descriptionTextPush = getString(R.string.channel_description)\r\n            val importancePush = NotificationManager.IMPORTANCE_DEFAULT\r\n            val channelPush = NotificationChannel(channelIdPush, namePush, importancePush).apply {\r\n                description = descriptionTextPush\r\n            }\r\n\r\n            val nameDownload = getString(R.string.channel_name_download)\r\n            val channelIdDownload = getString(R.string.download_notification_channel_id)\r\n            val descriptionTextDownload = getString(R.string.channel_description_download)\r\n            val importanceDownload = NotificationManager.IMPORTANCE_LOW\r\n            val channelDownload =\r\n                NotificationChannel(channelIdDownload, nameDownload, importanceDownload).apply {\r\n                    description = descriptionTextDownload\r\n                }\r\n\r\n            val notificationManager: NotificationManager =\r\n                getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\r\n            notificationManager.createNotificationChannel(channelPush)\r\n            notificationManager.createNotificationChannel(channelDownload)\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/de/dertyp7214/rboardthememanager/utils/AppStartUp.kt b/app/src/main/java/de/dertyp7214/rboardthememanager/utils/AppStartUp.kt
--- a/app/src/main/java/de/dertyp7214/rboardthememanager/utils/AppStartUp.kt	(revision f9cbd78b639eb300a393ef58de0f2d6cc4c1a9cd)
+++ b/app/src/main/java/de/dertyp7214/rboardthememanager/utils/AppStartUp.kt	(date 1652980883103)
@@ -211,7 +211,7 @@
                         }
                     }
 
-                GboardUtils.loadBackupFlags { flags ->
+                GboardUtils.flagsChanged { flags ->
                     isReady = true
                     openDialog(R.string.load_flags_long, R.string.load_flags) {
                         val oldFlags = flags.readXML()
Index: app/src/main/java/de/dertyp7214/rboardthememanager/screens/PreferencesActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.dertyp7214.rboardthememanager.screens\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.os.Bundle\r\nimport android.view.Menu\r\nimport android.view.MenuItem\r\nimport android.view.View\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport de.Maxr1998.modernpreferences.PreferencesAdapter\r\nimport de.dertyp7214.rboardthememanager.databinding.ActivityPreferencesBinding\r\nimport de.dertyp7214.rboardthememanager.preferences.Preferences\r\nimport de.dertyp7214.rboardthememanager.utils.doAsync\r\nimport dev.chrisbanes.insetter.applyInsetter\r\n\r\nclass PreferencesActivity : AppCompatActivity() {\r\n\r\n    private lateinit var binding: ActivityPreferencesBinding\r\n    private lateinit var preferences: Preferences\r\n    private lateinit var recyclerView: RecyclerView\r\n\r\n    @SuppressLint(\"NotifyDataSetChanged\")\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivityPreferencesBinding.inflate(layoutInflater)\r\n        window.setDecorFitsSystemWindows(false)\r\n        setContentView(binding.root)\r\n\r\n        val preferencesToolbar = binding.preferencesToolbar\r\n        val loadingPreferences = binding.loadingPreferences\r\n        val extraContent = binding.extraContent\r\n        recyclerView = binding.recyclerView\r\n\r\n        preferences = Preferences(this, intent) {\r\n            recyclerView.adapter.let { adapter ->\r\n                if (adapter is PreferencesAdapter)\r\n                    adapter.setRootScreen(preferences.preferences)\r\n            }\r\n        }\r\n\r\n        preferences.extraView?.let { extraContent.addView(it) }\r\n\r\n        preferences.handleFab(binding.floatingActionButton)\r\n\r\n        binding.floatingActionButton.applyInsetter {\r\n            type( navigationBars = true) {\r\n                margin()\r\n            }\r\n        }\r\n\r\n        setSupportActionBar(preferencesToolbar)\r\n        supportActionBar?.setDisplayHomeAsUpEnabled(true)\r\n        title = preferences.title\r\n\r\n        preferencesToolbar.applyInsetter {\r\n            type(statusBars = true) {\r\n                margin()\r\n            }\r\n        }\r\n\r\n        recyclerView.applyInsetter {\r\n            type(navigationBars = true) {\r\n                margin()\r\n            }\r\n        }\r\n\r\n        recyclerView.layoutManager = LinearLayoutManager(this)\r\n        doAsync({ PreferencesAdapter(preferences.preferences) }) {\r\n            loadingPreferences.visibility = View.GONE\r\n            recyclerView.adapter = it\r\n            preferences.onStart(recyclerView, it)\r\n        }\r\n    }\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        preferences.loadMenu(menuInflater, menu)\r\n        return true\r\n    }\r\n\r\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        return preferences.onMenuClick(item)\r\n    }\r\n\r\n    override fun onSupportNavigateUp(): Boolean {\r\n        onBackPressed()\r\n        return true\r\n    }\r\n\r\n    override fun onBackPressed() {\r\n        preferences.onBackPressed { super.onBackPressed() }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/de/dertyp7214/rboardthememanager/screens/PreferencesActivity.kt b/app/src/main/java/de/dertyp7214/rboardthememanager/screens/PreferencesActivity.kt
--- a/app/src/main/java/de/dertyp7214/rboardthememanager/screens/PreferencesActivity.kt	(revision f9cbd78b639eb300a393ef58de0f2d6cc4c1a9cd)
+++ b/app/src/main/java/de/dertyp7214/rboardthememanager/screens/PreferencesActivity.kt	(date 1652981541798)
@@ -5,6 +5,7 @@
 import android.view.Menu
 import android.view.MenuItem
 import android.view.View
+import androidx.activity.OnBackPressedCallback
 import androidx.appcompat.app.AppCompatActivity
 import androidx.recyclerview.widget.LinearLayoutManager
 import androidx.recyclerview.widget.RecyclerView
@@ -71,6 +72,12 @@
             recyclerView.adapter = it
             preferences.onStart(recyclerView, it)
         }
+
+        onBackPressedDispatcher.addCallback(this, object : OnBackPressedCallback(true) {
+            override fun handleOnBackPressed() {
+                preferences.onBackPressed { onBackPressedDispatcher.onBackPressed() }
+            }
+        })
     }
 
     override fun onCreateOptionsMenu(menu: Menu): Boolean {
@@ -83,11 +90,7 @@
     }
 
     override fun onSupportNavigateUp(): Boolean {
-        onBackPressed()
+        onBackPressedDispatcher.onBackPressed()
         return true
     }
-
-    override fun onBackPressed() {
-        preferences.onBackPressed { super.onBackPressed() }
-    }
 }
\ No newline at end of file
Index: build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>@file:Suppress(\"UNUSED_VARIABLE\")\r\n\r\n// Top-level build file where you can add configuration options common to all sub-projects/modules.\r\nbuildscript {\r\n    repositories {\r\n        google()\r\n        mavenCentral()\r\n    }\r\n    dependencies {\r\n        classpath(\"com.android.tools.build:gradle:7.3.0-alpha09\")\r\n        //noinspection DifferentKotlinGradleVersion\r\n        classpath(kotlin(\"gradle-plugin\", version = \"1.6.20\"))\r\n        classpath(\"com.google.gms:google-services:4.3.10\")\r\n        //classpath(\"com.google.protobuf:protobuf-gradle-plugin:0.8.10\")\r\n    }\r\n}\r\n\r\nallprojects {\r\n    repositories {\r\n        google()\r\n        mavenCentral()\r\n        maven(\"https://jitpack.io\")\r\n        maven (\"https://oss.sonatype.org/content/repositories/snapshots/\")\r\n    }\r\n}\r\n\r\ntasks {\r\n    val clean by registering(Delete::class) {\r\n        delete(buildDir)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle.kts b/build.gradle.kts
--- a/build.gradle.kts	(revision f9cbd78b639eb300a393ef58de0f2d6cc4c1a9cd)
+++ b/build.gradle.kts	(date 1652980983005)
@@ -7,7 +7,7 @@
         mavenCentral()
     }
     dependencies {
-        classpath("com.android.tools.build:gradle:7.3.0-alpha09")
+        classpath("com.android.tools.build:gradle:7.4.0-alpha01")
         //noinspection DifferentKotlinGradleVersion
         classpath(kotlin("gradle-plugin", version = "1.6.20"))
         classpath("com.google.gms:google-services:4.3.10")
Index: app/src/main/java/de/dertyp7214/rboardthememanager/screens/ShareFlags.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.dertyp7214.rboardthememanager.screens\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.content.Intent\r\nimport android.content.Intent.ACTION_SEND\r\nimport android.os.Bundle\r\nimport android.view.Menu\r\nimport android.view.MenuItem\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport de.dertyp7214.rboardthememanager.R\r\nimport de.dertyp7214.rboardthememanager.adapter.ShareFlagsAdapter\r\nimport de.dertyp7214.rboardthememanager.components.LayoutManager\r\nimport de.dertyp7214.rboardthememanager.components.SearchBar\r\nimport de.dertyp7214.rboardthememanager.core.getMapExtra\r\nimport de.dertyp7214.rboardthememanager.core.setXmlValue\r\nimport de.dertyp7214.rboardthememanager.core.share\r\nimport de.dertyp7214.rboardthememanager.databinding.ActivityShareFlagsBinding\r\nimport de.dertyp7214.rboardthememanager.preferences.Flags\r\nimport dev.chrisbanes.insetter.applyInsetter\r\nimport java.io.File\r\n\r\nclass ShareFlags : AppCompatActivity() {\r\n\r\n    private var flags: Map<String, Any> = mapOf()\r\n\r\n    private lateinit var binding: ActivityShareFlagsBinding\r\n    private lateinit var adapter: ShareFlagsAdapter\r\n    private lateinit var searchBar: SearchBar\r\n    private var import: Boolean = false\r\n    private var titleRes: Int = R.string.share_flags_title\r\n\r\n    @SuppressLint(\"NotifyDataSetChanged\")\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivityShareFlagsBinding.inflate(layoutInflater)\r\n        window.setDecorFitsSystemWindows(false)\r\n        setContentView(binding.root)\r\n\r\n        import = intent.getBooleanExtra(\"import\", false)\r\n\r\n        val toolbar = binding.toolbar\r\n        searchBar = binding.searchBar\r\n        val recyclerView = binding.recyclerview\r\n\r\n        toolbar.applyInsetter {\r\n            type(statusBars = true) {\r\n                margin()\r\n            }\r\n        }\r\n\r\n        if (import) titleRes = R.string.import_flags_title\r\n\r\n        setSupportActionBar(toolbar)\r\n        supportActionBar?.setDisplayHomeAsUpEnabled(true)\r\n        title = getString(titleRes, 0)\r\n\r\n        flags = if (!import) Flags.flagValues\r\n        else intent.getMapExtra(\"flags\")\r\n        val orig = ArrayList(flags.map { it.key })\r\n        val flagKeys = ArrayList(orig)\r\n\r\n        adapter = ShareFlagsAdapter(flagKeys) {\r\n            title = getString(titleRes, adapter.getSelectedFlags().size)\r\n        }\r\n\r\n        recyclerView.layoutManager = LayoutManager(this)\r\n        recyclerView.adapter = adapter\r\n        recyclerView.setHasFixedSize(true)\r\n\r\n        searchBar.instantSearch = true\r\n        searchBar.setOnSearchListener { filter ->\r\n            flagKeys.clear()\r\n            flagKeys.addAll(orig.filter { it.contains(filter, true) || filter.isBlank() })\r\n            adapter.notifyDataSetChanged()\r\n        }\r\n        searchBar.setOnCloseListener {\r\n            flagKeys.clear()\r\n            flagKeys.addAll(orig)\r\n            adapter.notifyDataSetChanged()\r\n        }\r\n\r\n        if (import) {\r\n            adapter.selectAll()\r\n            title = getString(titleRes, adapter.getSelectedFlags().size)\r\n        }\r\n    }\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        if (import) menuInflater.inflate(R.menu.import_flags, menu)\r\n        else menuInflater.inflate(R.menu.share_flags, menu)\r\n        return true\r\n    }\r\n\r\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        return when (item.itemId) {\r\n            R.id.share -> {\r\n                var xml = \"<map/>\"\r\n                adapter.getSelectedFlags().forEach {\r\n                    xml = xml.setXmlValue(flags[it], it)\r\n                }\r\n                val file = File(filesDir, \"flags.rboard\")\r\n                file.writeText(xml)\r\n                file.share(this, \"text/xml\", ACTION_SEND, R.string.share_flags)\r\n                true\r\n            }\r\n            R.id.select_all -> {\r\n                adapter.selectAll()\r\n                title =\r\n                    getString(titleRes, adapter.getSelectedFlags().size)\r\n                true\r\n            }\r\n            R.id.apply_flags -> {\r\n                Flags.setUpFlags()\r\n                val selectedFlags = adapter.getSelectedFlags()\r\n                selectedFlags.forEach {\r\n                    Flags.setValue(flags[it], it, Flags.FILES.FLAGS)\r\n                }\r\n                Flags.applyChanges()\r\n                setResult(RESULT_OK, Intent().putExtra(\"size\", selectedFlags.size))\r\n                finish()\r\n                true\r\n            }\r\n            else -> super.onOptionsItemSelected(item)\r\n        }\r\n    }\r\n\r\n    override fun onSupportNavigateUp(): Boolean {\r\n        onBackPressed()\r\n        return true\r\n    }\r\n\r\n    override fun onBackPressed() {\r\n        if (searchBar.focus) searchBar.clearText()\r\n        else super.onBackPressed()\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        flags = mapOf()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/de/dertyp7214/rboardthememanager/screens/ShareFlags.kt b/app/src/main/java/de/dertyp7214/rboardthememanager/screens/ShareFlags.kt
--- a/app/src/main/java/de/dertyp7214/rboardthememanager/screens/ShareFlags.kt	(revision f9cbd78b639eb300a393ef58de0f2d6cc4c1a9cd)
+++ b/app/src/main/java/de/dertyp7214/rboardthememanager/screens/ShareFlags.kt	(date 1652980361419)
@@ -6,6 +6,7 @@
 import android.os.Bundle
 import android.view.Menu
 import android.view.MenuItem
+import androidx.activity.OnBackPressedCallback
 import androidx.appcompat.app.AppCompatActivity
 import de.dertyp7214.rboardthememanager.R
 import de.dertyp7214.rboardthememanager.adapter.ShareFlagsAdapter
@@ -79,6 +80,13 @@
             adapter.notifyDataSetChanged()
         }
 
+        onBackPressedDispatcher.addCallback(this, object : OnBackPressedCallback(true) {
+            override fun handleOnBackPressed() {
+                if (searchBar.focus) searchBar.clearText()
+                else onBackPressedDispatcher.onBackPressed()
+            }
+        })
+
         if (import) {
             adapter.selectAll()
             title = getString(titleRes, adapter.getSelectedFlags().size)
@@ -125,15 +133,10 @@
     }
 
     override fun onSupportNavigateUp(): Boolean {
-        onBackPressed()
+        onBackPressedDispatcher.onBackPressed()
         return true
     }
 
-    override fun onBackPressed() {
-        if (searchBar.focus) searchBar.clearText()
-        else super.onBackPressed()
-    }
-
     override fun onDestroy() {
         super.onDestroy()
         flags = mapOf()
Index: app/build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>@file:Suppress(\"SpellCheckingInspection\")\r\n\r\nimport org.jetbrains.kotlin.gradle.plugin.getKotlinPluginVersion\r\n\r\n//import com.google.protobuf.gradle.*\r\n\r\nplugins {\r\n    id(\"com.android.application\")\r\n    //id(\"com.google.protobuf\")\r\n    id(\"kotlin-android-extensions\")\r\n    kotlin(\"android\")\r\n    kotlin(\"kapt\")\r\n    id(\"com.google.gms.google-services\")\r\n}\r\n\r\nval libsuVersion = \"4.0.2\"\r\nval kotlinVersion: String = project.getKotlinPluginVersion()\r\n\r\nandroid {\r\n    compileSdkPreview = \"Tiramisu\"\r\n    buildToolsVersion = \"33.0.0 rc2\"\r\n    buildFeatures.dataBinding = true\r\n    buildFeatures.viewBinding = true\r\n\r\n    defaultConfig {\r\n        applicationId = \"de.dertyp7214.rboardthememanager\"\r\n        minSdk = 31\r\n        targetSdk = 32\r\n        versionCode = 347000\r\n        versionName = \"3.4.8\"\r\n\r\n        testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        getByName(\"release\") {\r\n            isMinifyEnabled = false\r\n            proguardFiles(\r\n                getDefaultProguardFile(\"proguard-android-optimize.txt\"),\r\n                \"proguard-rules.pro\"\r\n            )\r\n        }\r\n        getByName(\"debug\") {\r\n            isDebuggable = true\r\n            applicationIdSuffix = \".debug\"\r\n        }\r\n        create(\"pro\") {\r\n            initWith(getByName(\"release\"))\r\n            applicationIdSuffix = \".pro\"\r\n        }\r\n    }\r\n    compileOptions {\r\n        sourceCompatibility = JavaVersion.VERSION_11\r\n        targetCompatibility = JavaVersion.VERSION_11\r\n    }\r\n    kotlinOptions {\r\n        jvmTarget = \"11\"\r\n    }\r\n\r\n    packagingOptions {\r\n        jniLibs {\r\n            useLegacyPackaging = true\r\n        }\r\n    }\r\n}\r\n\r\n/*protobuf {\r\n    protoc {\r\n        artifact = \"com.google.protobuf:protoc:3.10.0\"\r\n    }\r\n\r\n    plugins {\r\n        id(\"javalite\") {\r\n            artifact = \"com.google.protobuf:protoc-gen-javalite:3.0.0\"\r\n        }\r\n        id(\"grpc\") {\r\n            artifact = \"io.grpc:protoc-gen-grpc-java:1.25.0\"\r\n        }\r\n    }\r\n\r\n    generateProtoTasks {\r\n        all().forEach {\r\n            it.plugins {\r\n                id(\"javalite\")\r\n                id(\"grpc\")\r\n            }\r\n        }\r\n    }\r\n    generatedFilesBaseDir = \"$projectDir/build/generated\"\r\n}*/\r\n\r\ndependencies {\r\n    implementation(platform(\"com.google.firebase:firebase-bom:29.3.1\"))\r\n    implementation(\"com.google.firebase:firebase-messaging-ktx:23.0.3\")\r\n    implementation(\"com.google.firebase:firebase-analytics-ktx:20.1.2\")\r\n\r\n    implementation(\"androidx.legacy:legacy-support-v4:1.0.0\")\r\n    implementation(\"androidx.navigation:navigation-fragment-ktx:2.5.0-beta01\")\r\n    implementation(\"androidx.navigation:navigation-ui-ktx:2.5.0-beta01\")\r\n    implementation(\"org.apache.commons:commons-text:1.9\")\r\n\r\n    implementation(\"com.github.topjohnwu.libsu:core:$libsuVersion\")\r\n    implementation(\"com.github.topjohnwu.libsu:io:$libsuVersion\")\r\n    implementation(\"com.github.topjohnwu.libsu:busybox:$libsuVersion\")\r\n    implementation(\"dev.chrisbanes.insetter:insetter:0.6.1\")\r\n    implementation(\"androidx.core:core-ktx:1.9.0-alpha02\")\r\n    //noinspection DifferentStdlibGradleVersion\r\n\r\n    implementation(\"org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.6.21\")\r\n    implementation(\"androidx.core:core:1.9.0-alpha02\")\r\n\r\n    implementation(\"com.google.android.material:material:1.7.0-alpha01\")\r\n    implementation(\"androidx.constraintlayout:constraintlayout:2.1.3\")\r\n    implementation(\"androidx.preference:preference-ktx:1.2.0\")\r\n    implementation(\"androidx.activity:activity-ktx:1.6.0-alpha01\")\r\n    implementation(\"androidx.fragment:fragment-ktx:1.5.0-beta01\")\r\n    implementation(\"com.jaredrummler:android-shell:1.0.0\")\r\n    implementation(\"com.google.firebase:firebase-analytics:20.1.2\")\r\n    implementation(\"com.google.firebase:firebase-messaging:23.0.3\")\r\n    implementation(\"com.google.code.gson:gson:2.9.0\")\r\n    implementation(\"androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.0-beta01\")\r\n    implementation(\"com.bignerdranch.android:simple-item-decoration:1.0.0\")\r\n    implementation(\"de.dertyp7214:PRDownloader:v0.6.0\")\r\n    implementation(\"com.github.skydoves:balloon:1.4.4\")\r\n    testImplementation(\"junit:junit:4.13.2\")\r\n    androidTestImplementation(\"androidx.test.ext:junit:1.1.4-alpha05\")\r\n    androidTestImplementation(\"androidx.test.espresso:espresso-core:3.5.0-alpha05\")\r\n    implementation(\"androidx.browser:browser:1.4.0\")\r\n    implementation(\"com.github.bumptech.glide:glide:4.13.1\")\r\n    kapt(\"com.github.bumptech.glide:compiler:4.13.1\")\r\n    implementation(\"de.dertyp7214:PreferencesPlus:1.1\")\r\n    implementation(\"com.github.murgupluoglu:flagkit-android:1.0.2\")\r\n    implementation(fileTree(mapOf(\"dir\" to \"libs\", \"include\" to listOf(\"*.jar\", \"*.aar\"))))\r\n\r\n\r\n    debugImplementation(\"androidx.compose.ui:ui-tooling:1.2.0-alpha08\")\r\n    implementation(\"org.jetbrains.kotlin:kotlin-reflect:1.6.21\")\r\n\r\n\r\n    implementation(\"com.google.android.play:core:1.10.3\")\r\n    implementation(\"com.google.android.play:core-ktx:1.8.1\")\r\n\r\n    /*var grpc_version = \"1.43.2\"\r\n    implementation(\"io.grpc:grpc-android:$grpc_version\")\r\n    implementation(\"io.grpc:grpc-okhttp:$grpc_version\")\r\n    implementation(\"io.grpc:grpc-protobuf-lite:$grpc_version\")\r\n    implementation(\"io.grpc:grpc-stub:$grpc_version\")\r\n\r\n    var javax_annotation_version = \"1.3.2\"\r\n    implementation(\"javax.annotation:javax.annotation-api:$javax_annotation_version\")\r\n\r\n    implementation(\"com.google.protobuf:protobuf-kotlin:3.19.3\")*/\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle.kts b/app/build.gradle.kts
--- a/app/build.gradle.kts	(revision f9cbd78b639eb300a393ef58de0f2d6cc4c1a9cd)
+++ b/app/build.gradle.kts	(date 1652980954519)
@@ -91,40 +91,40 @@
 
 dependencies {
     implementation(platform("com.google.firebase:firebase-bom:29.3.1"))
-    implementation("com.google.firebase:firebase-messaging-ktx:23.0.3")
-    implementation("com.google.firebase:firebase-analytics-ktx:20.1.2")
+    implementation("com.google.firebase:firebase-messaging-ktx:23.0.4")
+    implementation("com.google.firebase:firebase-analytics-ktx:21.0.0")
 
     implementation("androidx.legacy:legacy-support-v4:1.0.0")
-    implementation("androidx.navigation:navigation-fragment-ktx:2.5.0-beta01")
-    implementation("androidx.navigation:navigation-ui-ktx:2.5.0-beta01")
+    implementation("androidx.navigation:navigation-fragment-ktx:2.5.0-rc01")
+    implementation("androidx.navigation:navigation-ui-ktx:2.5.0-rc01")
     implementation("org.apache.commons:commons-text:1.9")
 
     implementation("com.github.topjohnwu.libsu:core:$libsuVersion")
     implementation("com.github.topjohnwu.libsu:io:$libsuVersion")
     implementation("com.github.topjohnwu.libsu:busybox:$libsuVersion")
     implementation("dev.chrisbanes.insetter:insetter:0.6.1")
-    implementation("androidx.core:core-ktx:1.9.0-alpha02")
+    implementation("androidx.core:core-ktx:1.9.0-alpha04")
     //noinspection DifferentStdlibGradleVersion
 
     implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.6.21")
-    implementation("androidx.core:core:1.9.0-alpha02")
+    implementation("androidx.core:core:1.9.0-alpha04")
 
     implementation("com.google.android.material:material:1.7.0-alpha01")
     implementation("androidx.constraintlayout:constraintlayout:2.1.3")
     implementation("androidx.preference:preference-ktx:1.2.0")
-    implementation("androidx.activity:activity-ktx:1.6.0-alpha01")
-    implementation("androidx.fragment:fragment-ktx:1.5.0-beta01")
+    implementation("androidx.activity:activity-ktx:1.6.0-alpha04")
+    implementation("androidx.fragment:fragment-ktx:1.5.0-rc01")
     implementation("com.jaredrummler:android-shell:1.0.0")
-    implementation("com.google.firebase:firebase-analytics:20.1.2")
-    implementation("com.google.firebase:firebase-messaging:23.0.3")
+    implementation("com.google.firebase:firebase-analytics:21.0.0")
+    implementation("com.google.firebase:firebase-messaging:23.0.4")
     implementation("com.google.code.gson:gson:2.9.0")
-    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.0-beta01")
+    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.0-rc01")
     implementation("com.bignerdranch.android:simple-item-decoration:1.0.0")
     implementation("de.dertyp7214:PRDownloader:v0.6.0")
     implementation("com.github.skydoves:balloon:1.4.4")
     testImplementation("junit:junit:4.13.2")
-    androidTestImplementation("androidx.test.ext:junit:1.1.4-alpha05")
-    androidTestImplementation("androidx.test.espresso:espresso-core:3.5.0-alpha05")
+    androidTestImplementation("androidx.test.ext:junit:1.1.4-alpha06")
+    androidTestImplementation("androidx.test.espresso:espresso-core:3.5.0-alpha06")
     implementation("androidx.browser:browser:1.4.0")
     implementation("com.github.bumptech.glide:glide:4.13.1")
     kapt("com.github.bumptech.glide:compiler:4.13.1")
@@ -133,7 +133,7 @@
     implementation(fileTree(mapOf("dir" to "libs", "include" to listOf("*.jar", "*.aar"))))
 
 
-    debugImplementation("androidx.compose.ui:ui-tooling:1.2.0-alpha08")
+    debugImplementation("androidx.compose.ui:ui-tooling:1.2.0-beta02")
     implementation("org.jetbrains.kotlin:kotlin-reflect:1.6.21")
 
 
Index: app/src/main/java/de/dertyp7214/rboardthememanager/utils/GboardUtils.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.dertyp7214.rboardthememanager.utils\r\n\r\nimport android.content.Context\r\nimport android.content.pm.PackageManager\r\nimport android.content.pm.PackageManager.GET_META_DATA\r\nimport android.os.Build\r\nimport androidx.core.content.edit\r\nimport androidx.preference.PreferenceManager\r\nimport com.dertyp7214.logs.helpers.Logger\r\nimport de.dertyp7214.rboardthememanager.Application\r\nimport de.dertyp7214.rboardthememanager.Config.GBOARD_PACKAGE_NAME\r\n\r\nobject GboardUtils {\r\n    fun getGboardVersion(context: Context): String {\r\n        return try {\r\n            if (Build.VERSION.SDK_INT >= 33) {\r\n                context.packageManager.getPackageInfo(\r\n                    GBOARD_PACKAGE_NAME, PackageManager.PackageInfoFlags.of(\r\n                        GET_META_DATA.toLong()\r\n                    )\r\n                ).versionName\r\n            } else {\r\n                context.packageManager.getPackageInfo(\r\n                    GBOARD_PACKAGE_NAME,\r\n                    GET_META_DATA\r\n                ).versionName\r\n            }\r\n        } catch (error: Exception) {\r\n            Logger.log(\r\n                Logger.Companion.Type.ERROR,\r\n                \"GboardVersion\",\r\n                \"$GBOARD_PACKAGE_NAME: ${error.stackTraceToString()}\"\r\n            )\r\n            \"\"\r\n        }\r\n    }\r\n\r\n    fun getGboardVersionCode(context: Context): Long {\r\n        return PackageUtils.getAppVersionCode(\r\n            GBOARD_PACKAGE_NAME,\r\n            context.packageManager\r\n        )\r\n    }\r\n\r\n    fun updateCurrentFlags(flags: String) {\r\n        Application.context?.let { context ->\r\n            val preferences = PreferenceManager.getDefaultSharedPreferences(context)\r\n            val currentGboardVersion = getGboardVersionCode(context)\r\n            preferences.edit {\r\n                putLong(\"gboardVersion\", currentGboardVersion)\r\n                putString(\"flags\", flags)\r\n            }\r\n        }\r\n    }\r\n\r\n    fun loadBackupFlags(callback: (String) -> Unit) {\r\n        Application.context?.let { context ->\r\n            val preferences = PreferenceManager.getDefaultSharedPreferences(context)\r\n            val currentGboardVersion = getGboardVersionCode(context)\r\n            val lastGboardVersion = preferences.getLong(\"gboardVersion\", currentGboardVersion)\r\n            if (lastGboardVersion < currentGboardVersion)\r\n                preferences.getString(\"flags\", null)?.let(callback)\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/de/dertyp7214/rboardthememanager/utils/GboardUtils.kt b/app/src/main/java/de/dertyp7214/rboardthememanager/utils/GboardUtils.kt
--- a/app/src/main/java/de/dertyp7214/rboardthememanager/utils/GboardUtils.kt	(revision f9cbd78b639eb300a393ef58de0f2d6cc4c1a9cd)
+++ b/app/src/main/java/de/dertyp7214/rboardthememanager/utils/GboardUtils.kt	(date 1652980883108)
@@ -7,8 +7,12 @@
 import androidx.core.content.edit
 import androidx.preference.PreferenceManager
 import com.dertyp7214.logs.helpers.Logger
+import com.topjohnwu.superuser.io.SuFile
 import de.dertyp7214.rboardthememanager.Application
 import de.dertyp7214.rboardthememanager.Config.GBOARD_PACKAGE_NAME
+import de.dertyp7214.rboardthememanager.core.openStream
+import de.dertyp7214.rboardthememanager.core.readXML
+import de.dertyp7214.rboardthememanager.preferences.Flags
 
 object GboardUtils {
     fun getGboardVersion(context: Context): String {
@@ -62,4 +66,16 @@
                 preferences.getString("flags", null)?.let(callback)
         }
     }
+
+    fun flagsChanged(callback: (String) -> Unit) {
+        Application.context?.let { context ->
+            val preferences = PreferenceManager.getDefaultSharedPreferences(context)
+            val oldFlags = preferences.getString("flags", null)
+            val newFlags = SuFile(Flags.FILES.FLAGS.filePath).openStream()?.use {
+                it.bufferedReader().readText()
+            }
+            if (oldFlags != null && newFlags != null && oldFlags.readXML() != newFlags.readXML())
+                callback(newFlags)
+        }
+    }
 }
\ No newline at end of file
